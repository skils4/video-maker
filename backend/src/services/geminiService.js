const { GoogleGenerativeAI } = require("@google/generative-ai");
const fs = require('fs');
const path = require('path');
const wav = require('wav'); // –ó–∞–ª–µ–∂–Ω—ñ—Å—Ç—å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ WAV-—Ñ–∞–π–ª–∞–º–∏

// –°–ø–∏—Å–æ–∫ –≥–æ–ª–æ—Å—ñ–≤, –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏—Ö TTS-–º–æ–¥–µ–ª—è–º–∏
const GEMINI_VOICES = [
  "Zephyr","Puck","Charon","Kore","Fenrir","Leda","Orus","Aoede","Callirrhoe",
  "Autonoe","Enceladus","Iapetus","Umbriel","Algieba","Despina","Erinome",
  "Algenib","Rasalgethi","Laomedeia","Achernar","Alnilam","Schedar","Gacrux",
  "Pulcherrima","Achird","Zubenelgenubi","Vindemiatrix","Sadachbia",
  "Sadaltager","Sulafat"
];

class GeminiService {
  constructor() {
    if (!process.env.GEMINI_API_KEY || process.env.GEMINI_API_KEY === 'your_gemini_key_here') {
      console.warn('‚ö†Ô∏è  Gemini API –∫–ª—é—á –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ! –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é –¥–µ–º–æ-—Ä–µ–∂–∏–º.');
      this.demoMode = true;
    } else {
      console.log('‚úÖ Gemini API –∫–ª—é—á –∑–Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–∞—Ü—é—î–º–æ –≤ –ø–æ–≤–Ω–æ–º—É —Ä–µ–∂–∏–º—ñ');
      this.genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
      
      // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç–æ—á–Ω—É –º–æ–¥–µ–ª—å –¥–ª—è TTS –∑ –æ—Ñ—ñ—Ü—ñ–π–Ω–æ—ó –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó
      this.ttsModel = this.genAI.getGenerativeModel({ model: "gemini-2.5-flash-preview-tts" });
      
      // –û–∫—Ä–µ–º–∞ –º–æ–¥–µ–ª—å –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –∑–∞–≤–¥–∞–Ω—å
      this.textModel = this.genAI.getGenerativeModel({ model: "gemini-1.5-pro-latest" }); 
      
      this.demoMode = false;
    }
  }

  getAvailableVoices() {
    return GEMINI_VOICES.map(voice => ({
      name: voice,
      gender: 'SSML_VOICE_GENDER_UNSPECIFIED'
    }));
  }

  async generateAudio(text, options = {}) {
    if (this.demoMode) {
      throw new Error("–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∞—É–¥—ñ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º—ñ.");
    }

    const {
      instruction = '',
      voiceName = 'Kore' // –ì–æ–ª–æ—Å –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó
    } = options;

    try {
      // –§–æ—Ä–º—É—î–º–æ –ø—Ä–æ–º–ø—Ç, —è–∫ —É –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó
      const prompt = instruction ? `${instruction}: ${text}` : text;
      console.log(`üîä –ó–∞–ø–∏—Ç –¥–æ TTS. –ì–æ–ª–æ—Å: ${voiceName}. –ü—Ä–æ–º–ø—Ç: "${prompt.slice(0, 90)}..."`);
      
      // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é, —è–∫ —É –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó
      const generationConfig = {
        responseModalities: ['AUDIO'],
        speechConfig: {
          voiceConfig: {
            prebuiltVoiceConfig: { voiceName: voiceName },
          },
        },
      };

      const result = await this.ttsModel.generateContent({
        contents: [{ parts: [{ text: prompt }] }],
        generationConfig,
      });

      // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∞—É–¥—ñ–æ
      const audioData = result.response.candidates?.[0]?.content?.parts?.[0]?.inlineData?.data;
      if (!audioData) {
        throw new Error('API –Ω–µ –ø–æ–≤–µ—Ä–Ω—É–≤ –∞—É–¥—ñ–æ–¥–∞–Ω—ñ.');
      }
      
      const audioBuffer = Buffer.from(audioData, 'base64');
      
      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ñ–∞–π–ª —É —Ñ–æ—Ä–º–∞—Ç—ñ WAV
      const outputDir = path.join(process.cwd(), 'uploads', 'audio');
      await fs.promises.mkdir(outputDir, { recursive: true });

      const filename = `audio_${Date.now()}.wav`; // –ó–º—ñ–Ω–µ–Ω–æ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è –Ω–∞ .wav
      const filepath = path.join(outputDir, filename);

      // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –±—ñ–±–ª—ñ–æ—Ç–µ–∫—É wav –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è PCM –¥–∞–Ω–∏—Ö
      await new Promise((resolve, reject) => {
        const writer = new wav.FileWriter(filepath, {
          channels: 1,
          sampleRate: 24000, // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ —á–∞—Å—Ç–æ—Ç–∞ –¥–ª—è –º–æ–¥–µ–ª–µ–π Google TTS
          bitDepth: 16,
        });
        writer.on('finish', resolve);
        writer.on('error', reject);
        writer.write(audioBuffer);
        writer.end();
      });

      console.log(`‚úÖ –ê—É–¥—ñ–æ—Ñ–∞–π–ª –∑–±–µ—Ä–µ–∂–µ–Ω–æ: ${filename}`);

      return {
        url: `/uploads/audio/${filename}`,
        filename: filename
      };

    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∞—É–¥—ñ–æ –≤ Gemini TTS:', error);
      throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∞—É–¥—ñ–æ —á–µ—Ä–µ–∑ Gemini TTS.');
    }
  }

  // --- –ú–µ—Ç–æ–¥–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ —Ç–µ–∫—Å—Ç–æ–º ---

  _getPrompt(fileName, replacements = {}) {
    const promptTemplate = fs.readFileSync(
      path.join(__dirname, '../prompts', fileName),
      'utf-8'
    );
    
    let prompt = promptTemplate;
    for (const key in replacements) {
      prompt = prompt.replace(`\${${key}}`, replacements[key]);
    }
    return prompt;
  }

  async splitTextIntoBlocks(text, targetLanguage = 'uk') {
    try {
      if (this.demoMode) {
        return this.demoSplitText(text);
      }

      const languageMap = {
        'uk': '—É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é',
        'en': 'in English',
        'ru': '–Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ'
      };
      const outputLanguage = languageMap[targetLanguage] || languageMap['uk'];
      
      const prompt = this._getPrompt('splitTextPrompt.txt', { text, outputLanguage });

      // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –º–æ–¥–µ–ª—å –¥–ª—è —Ç–µ–∫—Å—Ç—É
      const result = await this.textModel.generateContent(prompt);
      const response = await result.response;
      const responseText = response.text();
      
      const cleanedResponse = responseText.replace(/```json\n?/g, '').replace(/```\n?/g, '');
      const jsonMatch = cleanedResponse.match(/\[[\s\S]*\]/);
      
      if (jsonMatch) {
        const blocks = JSON.parse(jsonMatch[0]);
        const validBlocks = blocks
          .filter(block => 
            block.text && block.imagePrompt && 
            typeof block.text === 'string' && typeof block.imagePrompt === 'string'
          )
          .map((block, index) => ({
            id: index + 1,
            text: block.text.trim(),
            originalText: block.originalText?.trim() || block.text.trim(),
            imagePrompt: block.imagePrompt.trim()
          }));
        
        if (validBlocks.length === 0) {
          throw new Error('Gemini –ø–æ–≤–µ—Ä–Ω—É–≤ –Ω–µ–≤–∞–ª—ñ–¥–Ω—ñ –±–ª–æ–∫–∏');
        }
        return validBlocks;
      }
      
      throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—å –∑–Ω–∞–π—Ç–∏ JSON —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ Gemini');
      
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ Gemini (splitTextIntoBlocks):', error.message);
      return this.demoSplitText(text);
    }
  }

  async rewriteText(text) {
    try {
      if (this.demoMode) {
        return this.demoRewriteText(text);
      }
      const prompt = this._getPrompt('rewritePrompt.txt', { text });
      // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –º–æ–¥–µ–ª—å –¥–ª—è —Ç–µ–∫—Å—Ç—É
      const result = await this.textModel.generateContent(prompt);
      const response = await result.response;
      return response.text().trim();
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ —Ä–µ—Ä–∞–π—Ç—É:', error);
      return this.demoRewriteText(text);
    }
  }

  // ... (—Ä–µ—à—Ç–∞ –≤–∞—à–∏—Ö –¥–µ–º–æ-–º–µ—Ç–æ–¥—ñ–≤ –±–µ–∑ –∑–º—ñ–Ω) ...

  demoSplitText(text) {
    const sentences = text.match(/[^.!?]+[.!?]+/g) || [text];
    const blocks = [];
    for (let i = 0; i < sentences.length; i += 2) {
      const blockText = sentences.slice(i, i + 2).join(' ').trim();
      blocks.push({
        id: i / 2 + 1,
        text: blockText,
        originalText: blockText,
        imagePrompt: `Scene ${Math.floor(i/2) + 1}: A visual representation of "${blockText.slice(0, 50)}"`
      });
    }
    return blocks;
  }

  demoRewriteText(text) {
    return `[DEMO] ${text} [–î–ª—è —Å–ø—Ä–∞–≤–∂–Ω—å–æ–≥–æ —Ä–µ—Ä–∞–π—Ç—É –ø–æ—Ç—Ä—ñ–±–µ–Ω API –∫–ª—é—á]`;
  }
}

module.exports = new GeminiService();