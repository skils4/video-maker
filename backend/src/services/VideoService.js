const ffmpeg = require('fluent-ffmpeg');
const ffprobeStatic = require('ffprobe-static');
const path = require('path');
const fs = require('fs').promises;

ffmpeg.setFfprobePath(ffprobeStatic.path);

class VideoService {
  constructor() {
    this.baseDir = path.join(process.cwd(), 'uploads');
    this.tempDir = path.join(this.baseDir, 'temp');
    this.outputDir = path.join(this.baseDir, 'videos');
  }

  async ensureDirectories() {
    try {
      await fs.mkdir(this.tempDir, { recursive: true });
      await fs.mkdir(this.outputDir, { recursive: true });
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó —Å—Ç–≤–æ—Ä–µ–Ω—ñ —ñ –¥–æ—Å—Ç—É–ø–Ω—ñ
      await fs.access(this.tempDir, fs.constants.W_OK);
      await fs.access(this.outputDir, fs.constants.W_OK);
      
      console.log('üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ');
      console.log(`   Temp: ${this.tempDir}`);
      console.log(`   Output: ${this.outputDir}`);
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π:', error);
      throw error;
    }
  }

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—É
  async validateFile(filePath) {
    try {
      await fs.access(filePath);
      const stats = await fs.stat(filePath);
      if (!stats.isFile()) {
        throw new Error(`–®–ª—è—Ö –Ω–µ —î —Ñ–∞–π–ª–æ–º: ${filePath}`);
      }
      console.log(`‚úÖ –§–∞–π–ª –≤–∞–ª—ñ–¥–Ω–∏–π: ${filePath}`);
      return true;
    } catch (error) {
      console.error(`‚ùå –§–∞–π–ª –Ω–µ —ñ—Å–Ω—É—î –∞–±–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π: ${filePath}`);
      throw new Error(`–§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: ${filePath}`);
    }
  }

  _getLocalPathFromUrl(urlPath) {
    if (!urlPath) {
      throw new Error('URL-—à–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º.');
    }
    
    const uploadsIdentifier = '/uploads/';
    const relativePathStartIndex = urlPath.indexOf(uploadsIdentifier);
    
    if (relativePathStartIndex === -1) {
      throw new Error(`–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π URL-—à–ª—è—Ö, –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ '${uploadsIdentifier}': ${urlPath}`);
    }
    
    const relativePath = urlPath.substring(relativePathStartIndex + uploadsIdentifier.length);
    const fullPath = path.join(this.baseDir, relativePath);
    
    console.log(`üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è URL –≤ —à–ª—è—Ö: ${urlPath} -> ${fullPath}`);
    return fullPath;
  }

  async generateVideo(config, musicFile, io) {
    console.log('üé¨ –ü–æ—á–∏–Ω–∞—é –ø–æ–≤–Ω–∏–π –ø—Ä–æ—Ü–µ—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–µ–æ...');
    const { blocks, settings } = config;
    const clipPaths = [];

    try {
      // –ö–†–ò–¢–ò–ß–ù–û: –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è, —â–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó —ñ—Å–Ω—É—é—Ç—å
      await this.ensureDirectories();

      for (let i = 0; i < blocks.length; i++) {
        const block = blocks[i];
        const progressMessage = `–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ü–µ–Ω–∏ ${i + 1}/${blocks.length}...`;
        console.log(progressMessage);
        io.emit('progress', { message: progressMessage });

        const imagePath = this._getLocalPathFromUrl(block.imageUrl);
        const audioPath = this._getLocalPathFromUrl(block.audioUrl);
        
        // –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ñ–∞–π–ª—ñ–≤ –ø–µ—Ä–µ–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º
        await this.validateFile(imagePath);
        await this.validateFile(audioPath);
        
        const audioDuration = await this.getAudioDuration(audioPath);
        console.log(`üéµ –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –∞—É–¥—ñ–æ –¥–ª—è —Å—Ü–µ–Ω–∏ ${i + 1}: ${audioDuration}s`);
        
        const effect = settings.effects[block.id] || 'zoom_in';
        const clipPath = await this.createClip(imagePath, audioPath, audioDuration, i, effect);
        clipPaths.push({ path: clipPath, duration: audioDuration });
      }

      const concatMessage = '–ó–≤–µ–¥–µ–Ω–Ω—è —Å—Ü–µ–Ω –∑ –ø–µ—Ä–µ—Ö–æ–¥–∞–º–∏...';
      console.log(concatMessage);
      io.emit('progress', { message: concatMessage });
      const concatenatedVideoPath = await this.concatenateClips(clipPaths);

      const masterMessage = '–ù–∞–∫–ª–∞–¥–∞–Ω–Ω—è —Ñ–æ–Ω–æ–≤–æ—ó –º—É–∑–∏–∫–∏ —Ç–∞ —Ñ—ñ–Ω–∞–ª—ñ–∑–∞—Ü—ñ—è...';
      console.log(masterMessage);
      io.emit('progress', { message: masterMessage });
      
      let finalVideoPath = concatenatedVideoPath;
      if (musicFile) {
        const musicFilePath = path.join(this.tempDir, musicFile.originalname);
        await fs.writeFile(musicFilePath, musicFile.buffer);
        finalVideoPath = await this.applyMastering(concatenatedVideoPath, musicFilePath, settings);
      }
      
      const finalVideoUrl = `/videos/${path.basename(finalVideoPath)}`;

      console.log('‚úÖ –í—ñ–¥–µ–æ —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!', finalVideoUrl);
      io.emit('video-complete', { url: finalVideoUrl });
      
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–µ–æ:', error);
      io.emit('generation-error', { 
        error: '–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–µ–æ', 
        details: error.message 
      });
    }
  }

  getAudioDuration(audioPath) {
    return new Promise((resolve, reject) => {
      console.log(`üîç –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ –∞—É–¥—ñ–æ: ${audioPath}`);
      
      ffmpeg.ffprobe(audioPath, (err, metadata) => {
        if (err) {
          console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ ffprobe:', err);
          return reject(err);
        }
        const duration = metadata.format.duration;
        console.log(`‚è±Ô∏è –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: ${duration}s`);
        resolve(duration);
      });
    });
  }

  createClip(imagePath, audioPath, duration, index, effect = 'zoom_in') {
    return new Promise(async (resolve, reject) => {
      const outputPath = path.join(this.tempDir, `clip_${index}.mp4`);
      
      console.log(`üé® –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª—ñ–ø—É ${index}:`);
      console.log(`   –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è: ${imagePath}`);
      console.log(`   –ê—É–¥—ñ–æ: ${audioPath}`);
      console.log(`   –í–∏—Ö—ñ–¥: ${outputPath}`);
      console.log(`   –ï—Ñ–µ–∫—Ç: ${effect}`);
      console.log(`   –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: ${duration}s`);

      // –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è, —â–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è –¥–ª—è –≤–∏–≤–æ–¥—É —ñ—Å–Ω—É—î
      try {
        await fs.mkdir(path.dirname(outputPath), { recursive: true });
        const dirStats = await fs.stat(path.dirname(outputPath));
        if (!dirStats.isDirectory()) {
          throw new Error('–®–ª—è—Ö –Ω–µ —î –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—î—é');
        }
      } catch (err) {
        console.error('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é:', err);
        return reject(err);
      }

      // –û–∫—Ä—É–≥–ª—é—î–º–æ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –¥–æ 2 –∑–Ω–∞–∫—ñ–≤ –ø—ñ—Å–ª—è –∫–æ–º–∏
      const roundedDuration = Math.round(duration * 100) / 100;
      
      // –û–±—á–∏—Å–ª—é—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–∞–¥—Ä—ñ–≤ –¥–ª—è –µ—Ñ–µ–∫—Ç—É (25 fps)
      const frameCount = Math.round(roundedDuration * 25);
      
      // –ü—Ä–æ—Å—Ç—ñ —Ç–∞ –Ω–∞–¥—ñ–π–Ω—ñ –µ—Ñ–µ–∫—Ç–∏
      let filterString;
      switch(effect) {
        case 'zoom_in':
          // –ü–ª–∞–≤–Ω–µ –Ω–∞–±–ª–∏–∂–µ–Ω–Ω—è
          filterString = `scale=-2:1080,crop=1920:1080,zoompan=z='min(zoom+0.0015,1.5)':d=${frameCount}:s=1920x1080`;
          break;
          
        case 'zoom_out':
          // –ü–ª–∞–≤–Ω–µ –≤—ñ–¥–¥–∞–ª–µ–Ω–Ω—è
          filterString = `scale=-2:1080,crop=1920:1080,zoompan=z='if(lte(zoom,1.0),1.5,max(1.0,zoom-0.0015))':d=${frameCount}:s=1920x1080`;
          break;
          
        case 'fade':
          // –ü–ª–∞–≤–Ω–µ –∑–∞—Ç–µ–º–Ω–µ–Ω–Ω—è –Ω–∞ –ø–æ—á–∞—Ç–∫—É —Ç–∞ –≤ –∫—ñ–Ω—Ü—ñ
          filterString = `scale=1920:1080:force_original_aspect_ratio=decrease,pad=1920:1080:(ow-iw)/2:(oh-ih)/2,fade=t=in:st=0:d=1,fade=t=out:st=${roundedDuration - 1}:d=1`;
          break;
          
        case 'blur_in':
          // –°–ø—Ä–æ—â–µ–Ω–∏–π –µ—Ñ–µ–∫—Ç —Ä–æ–∑–º–∏—Ç—Ç—è
          filterString = `scale=1920:1080:force_original_aspect_ratio=decrease,pad=1920:1080:(ow-iw)/2:(oh-ih)/2`;
          // –î–æ–¥–∞–º–æ —Ä–æ–∑–º–∏—Ç—Ç—è –æ–∫—Ä–µ–º–∏–º –∫—Ä–æ–∫–æ–º —á–µ—Ä–µ–∑ —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å —Å–∏–Ω—Ç–∞–∫—Å–∏—Å—É
          break;
          
        case 'rotate':
          // –°–ø—Ä–æ—â–µ–Ω–µ –æ–±–µ—Ä—Ç–∞–Ω–Ω—è –±–µ–∑ —Ñ–æ—Ä–º—É–ª
          filterString = `scale=1920:1080:force_original_aspect_ratio=decrease,pad=1920:1080:(ow-iw)/2:(oh-ih)/2`;
          break;
          
        case 'static':
        default:
          // –°—Ç–∞—Ç–∏—á–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
          filterString = 'scale=1920:1080:force_original_aspect_ratio=decrease,pad=1920:1080:(ow-iw)/2:(oh-ih)/2';
      }

      console.log(`üé≠ –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —Ñ—ñ–ª—å—Ç—Ä: ${filterString}`);

      // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥ - —Å—Ç–≤–æ—Ä—é—î–º–æ –≤—ñ–¥–µ–æ –æ–∫—Ä–µ–º–æ, –ø–æ—Ç—ñ–º –¥–æ–¥–∞—î–º–æ –∞—É–¥—ñ–æ
      const tempVideoPath = path.join(this.tempDir, `temp_video_${index}.mp4`);
      
      try {
        // –î–ª—è blur_in –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥
        if (effect === 'blur_in') {
          await this.createBlurInEffect(imagePath, tempVideoPath, roundedDuration);
        } else if (effect === 'rotate') {
          await this.createRotateEffect(imagePath, tempVideoPath, roundedDuration);
        } else {
          // –ö—Ä–æ–∫ 1: –°—Ç–≤–æ—Ä—é—î–º–æ –≤—ñ–¥–µ–æ –∑ –µ—Ñ–µ–∫—Ç–æ–º
          await new Promise((resolveVideo, rejectVideo) => {
            ffmpeg()
              .input(imagePath)
              .inputOptions(['-loop', '1'])
              .outputOptions([
                '-vf', filterString,
                '-c:v', 'libx264',
                '-t', roundedDuration.toString(),
                '-pix_fmt', 'yuv420p',
                '-preset', 'fast',
                '-crf', '23'
              ])
              .on('start', (cmd) => {
                console.log('üìπ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–µ–æ —á–∞—Å—Ç–∏–Ω–∏:', cmd);
              })
              .on('progress', (progress) => {
                if (progress.percent) {
                  console.log(`‚è≥ –ü—Ä–æ–≥—Ä–µ—Å –≤—ñ–¥–µ–æ ${index}: ${Math.round(progress.percent)}%`);
                }
              })
              .on('end', () => {
                console.log('‚úÖ –í—ñ–¥–µ–æ —á–∞—Å—Ç–∏–Ω–∞ –≥–æ—Ç–æ–≤–∞');
                resolveVideo();
              })
              .on('error', (err) => {
                console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–µ–æ:', err);
                rejectVideo(err);
              })
              .save(tempVideoPath);
          });
        }

        // –ö—Ä–æ–∫ 2: –î–æ–¥–∞—î–º–æ –∞—É–¥—ñ–æ –¥–æ –≤—ñ–¥–µ–æ
        await new Promise((resolveAudio, rejectAudio) => {
          ffmpeg()
            .input(tempVideoPath)
            .input(audioPath)
            .outputOptions([
              '-c:v', 'copy',
              '-c:a', 'aac',
              '-shortest',
              '-avoid_negative_ts', 'make_zero'
            ])
            .on('start', (cmd) => {
              console.log('üéµ –î–æ–¥–∞–≤–∞–Ω–Ω—è –∞—É–¥—ñ–æ:', cmd);
            })
            .on('progress', (progress) => {
              if (progress.percent) {
                console.log(`‚è≥ –ü—Ä–æ–≥—Ä–µ—Å –∞—É–¥—ñ–æ ${index}: ${Math.round(progress.percent)}%`);
              }
            })
            .on('end', async () => {
              // –í–∏–¥–∞–ª—è—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª
              try {
                await fs.unlink(tempVideoPath);
              } catch (e) {
                console.log('‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª:', e.message);
              }
              console.log(`‚úÖ –ö–ª—ñ–ø ${index} —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ`);
              resolveAudio();
            })
            .on('error', (err) => {
              console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∞—É–¥—ñ–æ:`, err);
              rejectAudio(err);
            })
            .save(outputPath);
        });

        resolve(outputPath);
      } catch (error) {
        reject(error);
      }
    });
  }
  
  concatenateClips(clips) {
    return new Promise(async (resolve, reject) => {
      const outputPath = path.join(this.tempDir, `concatenated_${Date.now()}.mp4`);
      const fileListPath = path.join(this.tempDir, 'filelist.txt');
      
      // –°—Ç–≤–æ—Ä—é—î–º–æ —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª—ñ–≤ –∑ –∞–±—Å–æ–ª—é—Ç–Ω–∏–º–∏ —à–ª—è—Ö–∞–º–∏
      const fileContent = clips.map(c => `file '${path.resolve(c.path)}'`).join('\n');
      
      console.log('üìù –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ–∞–π–ª—É —Å–ø–∏—Å–∫—É –¥–ª—è –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü—ñ—ó...');
      console.log('–í–º—ñ—Å—Ç filelist.txt:');
      console.log(fileContent);
      
      try {
        await fs.writeFile(fileListPath, fileContent);
        
        ffmpeg()
          .input(fileListPath)
          .inputOptions(['-f', 'concat', '-safe', '0'])
          .outputOptions(['-c', 'copy'])
          .on('start', (commandLine) => {
            console.log('üîó FFmpeg –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü—ñ—è:', commandLine);
          })
          .on('progress', (progress) => {
            if (progress.percent) {
              console.log(`‚è≥ –ü—Ä–æ–≥—Ä–µ—Å –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü—ñ—ó: ${Math.round(progress.percent)}%`);
            }
          })
          .on('end', async () => {
            // –í–∏–¥–∞–ª—è—î–º–æ —Ñ–∞–π–ª —Å–ø–∏—Å–∫—É –ø—ñ—Å–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
            try {
              await fs.unlink(fileListPath);
            } catch (e) {
              console.log('‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ filelist.txt:', e.message);
            }
            console.log('‚úÖ –ö–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
            resolve(outputPath);
          })
          .on('error', (err) => {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü—ñ—ó:', err);
            reject(err);
          })
          .save(outputPath);
      } catch (err) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É filelist.txt:', err);
        reject(err);
      }
    });
  }

  applyMastering(videoPath, musicPath, settings) {
    return new Promise(async (resolve, reject) => {
      const outputPath = path.join(this.outputDir, `final_video_${Date.now()}.mp4`);
      
      console.log('üéº –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –º–∞—Å—Ç–µ—Ä–∏–Ω–≥—É...');
      console.log(`   –í—ñ–¥–µ–æ: ${videoPath}`);
      console.log(`   –ú—É–∑–∏–∫–∞: ${musicPath}`);
      console.log(`   –í–∏—Ö—ñ–¥: ${outputPath}`);
      console.log(`   Audio Ducking: ${settings.audioDucking}`);
      
      // –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è, —â–æ –≤–∏—Ö—ñ–¥–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è —ñ—Å–Ω—É—î
      try {
        await fs.mkdir(this.outputDir, { recursive: true });
      } catch (err) {
        console.error('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–ª—è —Ñ—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –≤—ñ–¥–µ–æ:', err);
        return reject(err);
      }
      
      // –û—Ç—Ä–∏–º—É—î–º–æ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –≤—ñ–¥–µ–æ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∑–∞—Ü–∏–∫–ª–µ–Ω–Ω—è –º—É–∑–∏–∫–∏
      ffmpeg.ffprobe(videoPath, (err, metadata) => {
        if (err) {
          console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –º–µ—Ç–∞–¥–∞–Ω–∏—Ö –≤—ñ–¥–µ–æ:', err);
          return reject(err);
        }
        
        const videoDuration = metadata.format.duration;
        console.log(`‚è±Ô∏è –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –≤—ñ–¥–µ–æ: ${videoDuration}s`);
        
        // –°–ø—Ä–æ—â–µ–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥ - —Å–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä—é—î–º–æ –≤—ñ–¥–µ–æ –∑ –º—É–∑–∏–∫–æ—é –±–µ–∑ —Å–∫–ª–∞–¥–Ω–∏—Ö —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
        if (settings.audioDucking) {
          // –ó –ø—Ä–∏–≥–ª—É—à–µ–Ω–Ω—è–º –º—É–∑–∏–∫–∏ –ø—ñ–¥ —á–∞—Å –º–æ–≤–ª–µ–Ω–Ω—è - —Ä–æ–∑–¥—ñ–ª—è—î–º–æ –Ω–∞ –∫—Ä–æ–∫–∏
          const tempAudioPath = path.join(this.tempDir, `mixed_audio_${Date.now()}.aac`);
          
          // –ö—Ä–æ–∫ 1: –°—Ç–≤–æ—Ä—é—î–º–æ –∑–º—ñ—à–∞–Ω–µ –∞—É–¥—ñ–æ
          ffmpeg()
            .input(videoPath)
            .input(musicPath)
            .complexFilter([
              '[1:a]aloop=loop=-1:size=2e+09,volume=0.3[bgmusic]',
              '[0:a][bgmusic]amix=inputs=2:duration=first:weights=1 0.3[mixed]'
            ])
            .map('[mixed]')
            .audioCodec('aac')
            .noVideo()
            .duration(videoDuration)
            .on('start', (cmd) => {
              console.log('üéµ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–º—ñ—à–∞–Ω–æ–≥–æ –∞—É–¥—ñ–æ:', cmd);
            })
            .on('end', () => {
              console.log('‚úÖ –ê—É–¥—ñ–æ –∑–º—ñ—à–∞–Ω–æ');
              
              // –ö—Ä–æ–∫ 2: –û–±'—î–¥–Ω—É—î–º–æ –≤—ñ–¥–µ–æ –∑—ñ –∑–º—ñ—à–∞–Ω–∏–º –∞—É–¥—ñ–æ
              ffmpeg()
                .input(videoPath)
                .input(tempAudioPath)
                .videoCodec('copy')
                .audioCodec('copy')
                .map('[0:v]')
                .map('[1:a]')
                .on('start', (cmd) => {
                  console.log('üé¨ –§—ñ–Ω–∞–ª—ñ–∑–∞—Ü—ñ—è –≤—ñ–¥–µ–æ:', cmd);
                })
                .on('end', async () => {
                  try {
                    await fs.unlink(tempAudioPath);
                  } catch (e) {
                    console.log('‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ —Ç–∏–º—á–∞—Å–æ–≤–µ –∞—É–¥—ñ–æ:', e.message);
                  }
                  console.log('‚úÖ –ú–∞—Å—Ç–µ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ');
                  resolve(outputPath);
                })
                .on('error', (err) => {
                  console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ñ—ñ–Ω–∞–ª—ñ–∑–∞—Ü—ñ—ó:', err);
                  reject(err);
                })
                .save(outputPath);
            })
            .on('error', (err) => {
              console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞—É–¥—ñ–æ –º—ñ–∫—Å—É:', err);
              reject(err);
            })
            .save(tempAudioPath);
        } else {
          // –ü—Ä–æ—Å—Ç–∏–π –º—ñ–∫—Å –±–µ–∑ –ø—Ä–∏–≥–ª—É—à–µ–Ω–Ω—è - –ø—Ä—è–º–∏–π –ø—ñ–¥—Ö—ñ–¥
          ffmpeg()
            .input(videoPath)
            .input(musicPath)
            .videoCodec('copy')
            .audioCodec('aac')
            .outputOptions([
              '-filter_complex', '[1:a]aloop=loop=-1:size=2e+09,volume=0.25[bgmusic];[0:a][bgmusic]amix=inputs=2:duration=first[aout]',
              '-map', '0:v',
              '-map', '[aout]',
              '-shortest'
            ])
            .on('start', (commandLine) => {
              console.log('üéµ FFmpeg –º–∞—Å—Ç–µ—Ä–∏–Ω–≥ –∫–æ–º–∞–Ω–¥–∞:', commandLine);
            })
            .on('progress', (progress) => {
              if (progress.percent) {
                console.log(`‚è≥ –ü—Ä–æ–≥—Ä–µ—Å –º–∞—Å—Ç–µ—Ä–∏–Ω–≥—É: ${Math.round(progress.percent)}%`);
              }
            })
            .on('end', () => {
              console.log('‚úÖ –ú–∞—Å—Ç–µ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ');
              resolve(outputPath);
            })
            .on('error', (err) => {
              console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –º–∞—Å—Ç–µ—Ä–∏–Ω–≥—É:', err);
              reject(err);
            })
            .save(outputPath);
        }
      });
    });
  }

  // –î–æ–ø–æ–º—ñ–∂–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤
  async cleanupTempFiles() {
    try {
      const files = await fs.readdir(this.tempDir);
      for (const file of files) {
        const filePath = path.join(this.tempDir, file);
        try {
          await fs.unlink(filePath);
          console.log(`üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª: ${file}`);
        } catch (err) {
          console.error(`‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ ${file}:`, err.message);
        }
      }
    } catch (err) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤:', err);
    }
  }
}

module.exports = new VideoService();