const { VertexAI } = require('@google-cloud/vertexai');
const fs = require('fs');
const path = require('path');
const axios = require('axios');

class ImagenService {
  constructor() {
    this.outputDir = path.join(process.cwd(), 'uploads', 'images');
    this.ensureDirectory();

    // –ü—Ä–∏–≤'—è–∑–∫–∞ –º–µ—Ç–æ–¥—ñ–≤ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É `this`
    this.generateImage = this.generateImage.bind(this);
    this.generateAllImages = this.generateAllImages.bind(this);
    this.generateViaVertex = this.generateViaVertex.bind(this);
    this.generateViaStableDiffusion = this.generateViaStableDiffusion.bind(this);
    this.generateViaPollinations = this.generateViaPollinations.bind(this);
    
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ Vertex AI credentials
    this.vertexAvailable = false;
    const credentialsPath = path.join(process.cwd(), 'gcloud-credentials.json');
    
    try {
      if (fs.existsSync(credentialsPath)) {
        process.env.GOOGLE_APPLICATION_CREDENTIALS = credentialsPath;
        this.vertexAI = new VertexAI({
          project: 'mindful-path-464920-e6', // –í–∞—à ID –ø—Ä–æ—î–∫—Ç—É
          location: 'us-central1',
        });
        this.vertexAvailable = true;
        console.log('‚úÖ Vertex AI –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ');
      } else {
         console.warn('‚ö†Ô∏è  Vertex AI –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π: –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ gcloud-credentials.json');
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è  Vertex AI –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π:', error.message);
    }
    
    this.defaultProvider = process.env.IMAGE_PROVIDER || 'pollinations';
    console.log('üé® –ü—Ä–æ–≤–∞–π–¥–µ—Ä –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º:', this.defaultProvider);
  }

  async ensureDirectory() {
    try {
      await fs.promises.mkdir(this.outputDir, { recursive: true });
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞–ø–∫–∏ –¥–ª—è –∑–æ–±—Ä–∞–∂–µ–Ω—å:', error);
    }
  }

  // –û—Å–Ω–æ–≤–Ω–∏–π –º–µ—Ç–æ–¥-–º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó
  async generateImage(prompt, settings = {}) {
    const provider = settings.provider || this.defaultProvider;
    
    console.log(`\nüé® –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —á–µ—Ä–µ–∑ ${provider}`);
    console.log('üìù –ü—Ä–æ–º–ø—Ç:', prompt.substring(0, 50) + '...');
    
    switch (provider) {
      case 'vertex':
        if (this.vertexAvailable) {
          return await this.generateViaVertex(prompt, settings);
        }
        throw new Error('Vertex AI –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–ª—é—á');
        
      case 'stable-diffusion':
        return await this.generateViaStableDiffusion(prompt, settings);
        
      case 'pollinations':
      default:
        return await this.generateViaPollinations(prompt, settings);
    }
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤—Å—ñ—Ö –∑–æ–±—Ä–∞–∂–µ–Ω—å –∑ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º–∏ —á–µ—Ä–µ–∑ WebSocket
  async generateAllImages(blocks, settings, io) {
    console.log(`\nüé® –ü–æ—á–∏–Ω–∞—é –º–∞—Å–æ–≤—É –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é ${blocks.length} –∑–æ–±—Ä–∞–∂–µ–Ω—å...`);
    
    for (let i = 0; i < blocks.length; i++) {
      const block = blocks[i];
      
      try {
        console.log(`\nüì∏ –ë–ª–æ–∫ ${i + 1}/${blocks.length}`);
        
        const imageData = await this.generateImage(
          block.imagePrompt || block.text, 
          settings
        );
        
        io.emit('image-generated', {
          blockId: block.id,
          imageUrl: imageData.url,
          success: true,
          model: imageData.model,
          provider: imageData.provider
        });
        
        if (settings.provider === 'vertex' && i < blocks.length - 1) {
          console.log('‚è≥ –ß–µ–∫–∞—î–º–æ 1 —Å–µ–∫—É–Ω–¥—É (rate limit)...');
          await new Promise(resolve => setTimeout(resolve, 1000));
        }
        
      } catch (error) {
        console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–ª—è –±–ª–æ–∫—É ${block.id}:`, error.message);
        io.emit('generation-error', {
          blockId: block.id,
          error: error.message,
          success: false
        });
      }
    }
    
    console.log('\n‚úÖ –ú–∞—Å–æ–≤–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    io.emit('generation-complete', { message: '–í—Å—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ!' });
  }

  // --- –ú–ï–¢–û–î–ò –ì–ï–ù–ï–†–ê–¶–Ü–á ---

  async generateViaVertex(prompt, settings) {
    console.log('üî∑ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é Vertex AI...');
    const model = 'imagegeneration@006';
    const generativeModel = this.vertexAI.getGenerativeModel({ model });

    const request = {
      contents: [{ parts: [{ text: prompt }] }],
      generation_config: {
        sampleCount: 1,
        // aspectRatio: settings.aspectRatio || '16:9' // –¶–µ–π –ø–∞—Ä–∞–º–µ—Ç—Ä –º–æ–∂–µ –±—É—Ç–∏ –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏–º
      }
    };

    const [response] = await generativeModel.generateContent(request);
    const imageBase64 = response.candidates[0].content.parts[0].fileData.data;
    
    const filename = `vertex_${Date.now()}.png`;
    const filepath = path.join(this.outputDir, filename);
    await fs.promises.writeFile(filepath, Buffer.from(imageBase64, 'base64'));

    console.log('‚úÖ –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ Vertex AI');
    return {
      url: `/uploads/images/${filename}`,
      filename: filename,
      model,
      provider: 'vertex'
    };
  }

  async generateViaStableDiffusion(prompt, settings) {
    console.log('üü¶ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é Stable Diffusion...');
    if (!process.env.HUGGINGFACE_API_KEY) {
      throw new Error('Hugging Face API –∫–ª—é—á –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ –≤ .env!');
    }

    try {
      const response = await axios({
        method: 'POST',
        url: 'https://api-inference.huggingface.co/models/stabilityai/stable-diffusion-2-1',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${process.env.HUGGINGFACE_API_KEY}`
        },
        data: { inputs: prompt },
        responseType: 'arraybuffer',
        timeout: 60000
      });

      const filename = `sd_${Date.now()}.png`;
      const filepath = path.join(this.outputDir, filename);
      await fs.promises.writeFile(filepath, response.data);

      console.log('‚úÖ –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ Stable Diffusion');
      return {
        url: `/uploads/images/${filename}`,
        filename: filename,
        model: 'stable-diffusion-2.1',
        provider: 'stable-diffusion'
      };
    } catch (error) {
      if (error.response?.status === 503) {
        throw new Error('–ú–æ–¥–µ–ª—å Stable Diffusion –∑–∞—Ä–∞–∑ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î—Ç—å—Å—è, —Å–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ —Ö–≤–∏–ª–∏–Ω—É.');
      }
      throw error;
    }
  }

  async generateViaPollinations(prompt, settings) {
    console.log('üü© –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é Pollinations.ai...');
    const dimensions = this.getImageDimensions(settings.aspectRatio || '16:9');
    const encodedPrompt = encodeURIComponent(prompt);
    const imageUrl = `https://image.pollinations.ai/prompt/${encodedPrompt}?width=${dimensions.width}&height=${dimensions.height}&nologo=true`;
    
    const response = await axios.get(imageUrl, { 
      responseType: 'arraybuffer',
      timeout: 30000,
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36'
      }
    });
    
    const filename = `pollinations_${Date.now()}.png`;
    const filepath = path.join(this.outputDir, filename);
    await fs.promises.writeFile(filepath, response.data);
    
    console.log('‚úÖ –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ Pollinations');
    return {
      url: `/uploads/images/${filename}`,
      filename: filename,
      model: 'pollinations-ai',
      provider: 'pollinations'
    };
  }

  getImageDimensions(aspectRatio) {
    const dimensions = {
      '16:9': { width: 1024, height: 576 },
      '9:16': { width: 576, height: 1024 },
      '1:1': { width: 1024, height: 1024 },
      '4:3': { width: 1024, height: 768 },
      '3:4': { width: 768, height: 1024 }
    };
    return dimensions[aspectRatio] || dimensions['16:9'];
  }
}

module.exports = new ImagenService();